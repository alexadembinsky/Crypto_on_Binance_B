# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

from models import User, WatchList, TradingPair
from peewee import IntegrityError
from binance_api import BinanceAPI
from bot_instance import bot
from db_operations import create_user, create_watchlist, create_trading_pair, get_startup_list, get_watchlist_pairs


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é @–û–î–ë
        #new_user = User.create(
        #    user_id=user_id,
        #    username=username,
        #    first_name=first_name,
        #    last_name=last_name
        #)
        new_user = create_user(user_id, username, first_name, last_name)

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @–û–î–ë
        #base_list = WatchList.create(
        #    user=new_user,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        #    name="Base",
        #    show_on_startup=True
        #)
        base_list = create_watchlist(new_user, "Base", show_on_startup=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä—ã @–û–ë–î
        for symbol in ["BTCUSDT", "ETHUSDT"]:
            #TradingPair.create(
            #    watchlist=base_list,
            #    symbol=symbol
            #)
            create_trading_pair(base_list, symbol)

        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Å–ø–æ—Ç–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ Binance.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    except IntegrityError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        welcome_text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! üëã\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )

    bot.reply_to(message, welcome_text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ @–û–ë–î
    #startup_list = WatchList.get_or_none(
    #    (WatchList.user == user_id) &
    #    (WatchList.show_on_startup == True)
    #)
    startup_list = get_startup_list(user_id)

    if startup_list:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä
        pairs_text = ""
        for pair in get_watchlist_pairs(startup_list):
            try:
                r_o_f, price_info = BinanceAPI.format_price_change(pair.symbol)
                pairs_text = f"{pairs_text}{r_o_f} {pair.symbol}: {price_info}\n"
            except Exception:
                pairs_text = f"{pairs_text}{pair.symbol}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"

        if pairs_text:
            bot.send_message(user_id, pairs_text)
